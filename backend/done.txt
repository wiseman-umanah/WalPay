Mocks and placeholders in the current backend implementation
-----------------------------------------------------------
- Flow blockchain operations are still stubbed in `src/services/flowService.js`; real Cadence submissions and event listeners are pending.
- OTPs are now emailed via Nodemailer, but there’s no SMS fallback or delivery monitoring.
- Currency conversion for USD→FLOW still relies on a static `FLOW_USD_RATE`; a live FX source is not yet wired.
- Access/refresh tokens remain opaque strings stored in MongoDB; JWT signing/verification and session analytics are not implemented.
- No external notification or analytics hooks are connected; events are limited to server-side logging.

What is needed to implement the real integrations
-------------------------------------------------
- Flow blockchain integration: Install Flow CLI (`https://developers.flow.com/tools/flow-cli`), or include Flow Client Library/FCL in the stack; obtain network access (emulator/testnet/mainnet), service account keys, and optionally Flowser for inspection.
- OTP delivery: Choose and configure a provider SDK (SendGrid, Mailgun, AWS SES for email; Twilio, MessageBird for SMS), add required npm packages (`@sendgrid/mail`, `twilio`, etc.), and secure API credentials.
- USD↔FLOW pricing: Integrate a rate API (e.g., CoinGecko, Flow’s DEX oracles, openexchangerates), install HTTP client libs (`axios`, already planned), schedule jobs via a task runner (Agenda, BullMQ, or simple cron) and set persistence.
- Token hardening: If adopting JWT, add `jsonwebtoken` or `jose`, generate signing keys, and configure verification middleware; for session stores, consider Redis/Mongo TTL indexes and install the necessary clients.
- Notifications & analytics: Add libraries for chosen platforms (e.g., `@segment/analytics-node`, `datadog-metrics`, Firebase Cloud Messaging SDK), provision API keys, and wire event publishing into workflow hooks.

Environment variables to add
----------------------------
Backend (`backend/.env`)
- `MONGO_URI` (or keep `DB_URI`) – MongoDB connection string.
- `PORT` – API port (defaults to `4000`).
- `PLATFORM_FEE_PERCENT` – Platform fee percentage for payout maths.
- `FLOW_USD_RATE` – Optional USD→FLOW rate when products are priced in USD.
- `CORS_ORIGINS` – Comma-separated list of allowed frontend origins.
- `MAIL_HOST` – SMTP host for Nodemailer.
- `MAIL_PORT` – SMTP port (e.g. `587`).
- `MAIL_SECURE` – Set to `true` when using port 465/TLS.
- `MAIL_USER` – SMTP username/service email.
- `MAIL_PASSWORD` – SMTP password or app password.
- `MAIL_FROM` – Default “from” address for OTP emails.
- `CLOUDINARY_CLOUD_NAME` – Cloudinary cloud identifier.
- `CLOUDINARY_API_KEY` – Cloudinary API key.
- `CLOUDINARY_API_SECRET` – Cloudinary API secret.
- `CLOUDINARY_FOLDER` – Optional upload folder (defaults to `walpay`).

Frontend (`frontend/.env`)
- `VITE_API_URL` – Base URL for the backend API.
- `VITE_WALLETCONNECT_PROJECT_ID` – WalletConnect project ID for Flow wallets.
- `VITE_FLOW_ACCESS_NODE` – Flow access node URL.
- `VITE_FLOW_NETWORK` – Flow network name (`testnet`, `mainnet`, etc.).
- `VITE_DISCOVERY_WALLET` – Discovery wallet URL for FCL auth.
- `VITE_DISCOVERY_AUTHN_ENDPOINT` – Discovery Authn API endpoint.
- `VITE_DISCOVERY_WALLET_INCLUDE` – Comma-separated list of wallet addresses to expose in discovery.
- `VITE_APP_URL` – Public URL of the frontend (wallet metadata + payment links).
- `VITE_APP_ICON` – App icon URL displayed in wallet prompts.
